}
data_col_class(gapminder)
data_col_class <- function(df) {
for (i in names(df)) {
print(paste0(i, ": ", mode(df[, i])))
}
}
data_col_class(gapminder)
mean_and_SD <- function(arr, medianflag=FALSE) {
if (medianflag) {print(paste0("The median is ", median(arr)))}
print(paste0("The mean is ", mean(arr)))
print(paste0("The standard deviation is ", sd(arr)))
}
le <- gapminder$lifeExp
vector_info(le, include_median = F)
mean_and_SD <- function(arr, medianflag=FALSE) {
if (medianflag) {print(paste0("The median is ", median(arr)))}
print(paste0("The mean is ", mean(arr)))
print(paste0("The standard deviation is ", sd(arr)))
}
le <- gapminder$lifeExp
mean_and_SD(le, include_median = F)
mean_and_SD <- function(arr, medianflag=FALSE) {
if (medianflag) {print(paste0("The median is ", median(arr)))}
print(paste0("The mean is ", mean(arr)))
print(paste0("The standard deviation is ", sd(arr)))
}
le <- gapminder$lifeExp
mean_and_SD(le, medianflag = F)
mean_and_SD(le, medianflag = T)
View(gapminder)
View(gapminder)
plot(x = log(gapminder$gdpPercap), y = gapminder$lifeExp)
plot(x = log(gapminder$gdpPercap), y = log(gapminder$lifeExp))
m <- lm(gapminder$gdpPercap, gapminder$lifeExp)
m <- lm(gapminder$gdpPercap~gapminder$lifeExp)
abline(m)
plot(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
plot(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
m <- lm(gapminder$gdpPercap~gapminder$lifeExp)
abline(m)
m <- lm(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
abline(m)
plot(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
m <- lm(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
abline(m)
unique(gapminder$continent)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages('ggplot2', dependencies = TRUE)
## https://www.jianshu.com/p/0c25e1904026
install.packages('ggthemes', dependencies = TRUE)
install.packages('gridExtra', dependencies = TRUE)   # 一个画布上显示
getwd
knitr::opts_chunk$set(echo = TRUE)
# Analyzing the relationship_2
getwd()
ggthemes
setwd('/Users/JoeCheung/Desktop/CodeMyself/R')
library(ggthemes)
library(ggplot2)
pf = read.csv('pseudo_facebook.tsv', sep = '\t')
## 一页多图facet
qplot(data = pf, x = dob_day) + scale_x_continuous(breaks = 1:31) + facet_wrap(~dob_month, ncol = 4)
qplot(data = subset(pf, !is.na(gender)), x = dob_day) + scale_x_continuous(breaks = 1:31) + facet_wrap(~gender, ncol = 4)   #去除NA值,在原始数据中把gender的NA去掉
qplot(data = na.omit(pf), x = dob_day) + scale_x_continuous(breaks = 1:31) + facet_wrap(~gender, ncol = 4)   #去除NA值,在原始数据中把所有NA去掉
qplot(data = pf, x = dob_day) + scale_x_continuous(breaks = 1:31) + facet_wrap(~dob_month, ncol = 4)
plot(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
plot(log(gapminder$gdpPercap)~log(gapminder$lifeExp))
ggplot(aes(x = log(gapminder$gdpPercap), y = flog(gapminder$lifeExp)), data = pf) + geom_point() +  facet_wrap(~log(gapminder$continent))
ggplot(aes(x = log(gapminder$gdpPercap), y = log(gapminder$lifeExp))) + geom_point() +  facet_wrap(~log(gapminder$continent))
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point() +  facet_wrap(~log(gapminder$continent))
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point() +  facet_wrap(~gapminder$continent)
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point(alpha = 1/20) +  facet_wrap(~gapminder$continent)
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point(alpha = 1/5) +  facet_wrap(~gapminder$continent)
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point(alpha = 1/2) +  facet_wrap(~gapminder$continent)
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point(alpha = 1/2) + geom_smooth(method = 'lm', color = 'red') + facet_wrap(~gapminder$continent)
ggplot(aes(x = log(gdpPercap), y = log(lifeExp)), data = gapminder) + geom_point(alpha = 1/2) + geom_smooth(method = 'lm', color = 'red')
qplot(x = friend_count, y = ..count../sum(..count..),    #sum(..count..)是总样本量，如果要是每个自己比例，则用..density..
data = subset(pf, !is.na(gender)), binwidth = 10,
geom = "freqpoly", color = gender) +
scale_x_continuous(limits  =  c(0, 1000), breaks = seq(0, 1000, 50))
library(here)
library(readr)
generation <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors=F)
imports <- read.csv(here::here("data/ca_energy_imports.csv"), stringsA
sFactors=F)
generation <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors=F)
imports <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors=F)
library(lubridate)
generation$datetime <- as_datetime(generation$datetime)
class(generation$datetime)
library(reshape2)
long_gen <- melt(generation, id.vars = "datetime",
variable.name = "source",
value.name = "usage")
head(long_gen)
View(generation)
merged_energy <- merge(generation, imports, by = "datetime")
dim(merged_energy)
merged_energy
library(here)
library(readr)
generation <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors=F)
imports <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors=F)
library(lubridate)
generation$datetime <- as_datetime(generation$datetime)
class(generation$datetime)
# long/wide transformation
library(reshape2)
long_gen <- melt(generation, id.vars = "datetime",
variable.name = "source",
value.name = "usage")
head(long_gen)
# merge data
merged_energy <- merge(generation, imports, by = "datetime")
dim(merged_energy)
merged_energy
generation
imports
library(here)
library(readr)
generation <- read.csv(here::here("data/ca_energy_generation.csv"), stringsAsFactors=F)
imports <- read.csv(here::here("data/ca_energy_imports.csv"), stringsAsFactors=F)
library(lubridate)
generation$datetime <- as_datetime(generation$datetime)
imports$datetime <- as_datetime(imports$datetime)
class(generation$datetime)
# long/wide transformation
library(reshape2)
long_gen <- melt(generation, id.vars = "datetime",
variable.name = "source",
value.name = "usage")
head(long_gen)
# merge data
merged_energy <- merge(generation, imports, by = "datetime")
dim(merged_energy)
merged_energy
long_merged_energy <- melt(merged_energy, id.vars = "datetime",
variable.name = "source",
value.name = "usage")
head(long_merged_energy)
library(tidyverse)
select(merged_energy, contains("hydro"))
tmp <- mutate(long_merged_energy, log_usage = log(usage))
### data.table
library(data.table)
data_file <- here::here("data", "ca_energy_generation.csv")
generation_df <- read.csv(data_file, stringsAsFactors = F)
generation_dt <- fread(data_file)
class(generation_dt)
generation_df
generation_dt
generation_dt[,.(newcol = 3*wind + solar*biogas/2)]   # export data
generation_dt[,newcol := 3*wind + solar*biogas/2]   # in place
generation_dt
generation_dt[,newcol := NULL]
generation_dt
generation_dt[,median(solar), by = hour(datetime)]
generation_dt
generation_dt[,median(solar), by = hour(datetime)]
imports_dt[generation_dt[hour(datetime) == 2], on = "datetime", imports_gas_2 := imports + i.natural_gas]
imports_dt <- fread(here::here("data", "ca_energy_imports.csv"))
imports_dt[generation_dt[hour(datetime) == 2], on = "datetime", imports_gas_2 := imports + i.natural_gas]
imports_dt
imports_dt <- fread(here::here("data", "ca_energy_imports.csv"))
imports_dt[generation_dt, on = "datetime", imports_gas := imports + i.natural_gas]
imports_dt
imports_dt <- fread(here::here("data", "ca_energy_imports.csv"))
imports_dt[generation_dt, on = "datetime", imports_gas := imports + generation_dt.natural_gas]
imports_dt[generation_dt, on = "datetime", imports_gas := imports + generation_dt$natural_gas]
imports_dt
imports_dt[generation_dt, on = "datetime", imports_gas := imports + .natural_gas]
help(i)
?data.table
library(dplyr)
library(lubridate)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"),
stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"),
stringsAsFactors = F)
generation_dp <- mutate(generation_dp, datetime = as_datetime(datetime))
imports_dp <- mutate(imports_dp, datetime = as_datetime(datetime))
rm(list=ls())
answers<-params$answers
knitr::opts_chunk$set(echo=answers, eval=answers,
warning = FALSE, message = FALSE,
cache = FALSE, tidy = FALSE)
library(dplyr)
library(lubridate)
generation_dp <- read.csv(here::here("data/ca_energy_generation.csv"),
stringsAsFactors = F)
imports_dp <- read.csv(here::here("data/ca_energy_imports.csv"),
stringsAsFactors = F)
generation_dp <- mutate(generation_dp, datetime = as_datetime(datetime))
imports_dp <- mutate(imports_dp, datetime = as_datetime(datetime))
library(data.table)
library(lubridate)
generation_dt <- fread(here::here("data/ca_energy_generation.csv"))
imports_dt <- fread(here::here("data/ca_energy_imports.csv"))
generation_dt[,datetime := as_datetime(datetime)]
imports_dt[,datetime := as_datetime(datetime)]
# We chose to use dplyr::inner_join here to illustrate how this can be done in a single piped operation, but you can also use base::merge
library(reshape2)
long_ca_energy_dp <- generation_dp %>%
inner_join(imports_dp, by = "datetime") %>%
melt(id.vars = "datetime",
variable.name = "source",
value.name = "output")
all_sources <- merge(generation_dt, imports_dt, by = "datetime")
long_ca_energy_dt <- melt(all_sources,
id.vars = "datetime",
variable.name = "source",
value.name = "output")
# another option: advanced join
long_ca_energy_dt <- melt(generation_dt[imports_dt, on = "datetime"],
id.vars = "datetime",
variable.name = "source",
value.name = "output")
long_ca_energy_dp <- long_ca_energy_dp %>%
mutate(day = as_date(datetime),
log_output = log(output)) %>%
group_by(day) %>%
mutate(total_daily_output = sum(output, na.rm = T)) %>%
ungroup() %>%
mutate(per_output = output/total_daily_output)
# Check results
long_ca_energy_dp %>% select(day, log_output, per_output) %>% head()
long_ca_energy_dt[,day := as_date(datetime)]
long_ca_energy_dt[,log_output := log(output)]
long_ca_energy_dt[,per_output := output/sum(output, na.rm = TRUE), by = day]
# one command (stylistic/readability choice)
long_ca_energy_dt[,`:=`(day = as_date(datetime),
log_output = log(output),
per_output = output/sum(output, na.rm = TRUE)),
by = day]
long_ca_energy_dp %>%
group_by(source) %>%
summarize(mean_hourly = mean(output, na.rm = T)) %>%
arrange(desc(mean_hourly))
long_ca_energy_dp %>%
group_by(source) %>%
summarize(mean_hourly = mean(output, na.rm = T)) %>%
arrange(mean_hourly)
mean_hrly <- long_ca_energy_dt[,.(mean_hourly = mean(output)), by = source]
mean_hrly[mean_hourly == max(mean_hourly) | mean_hourly == min(mean_hourly)]
# another option
setorder(mean_hrly, -mean_hourly)
mean_hrly
# another option: chained together, no new variable
long_ca_energy_dt[,.(mean_hourly = mean(output)), by = source][mean_hourly %in% c(max(mean_hourly), min(mean_hourly))]
long_ca_energy_dp
long_ca_energy_dp %>%
group_by(source)
long_ca_energy_dp %>%
group_by(source) %>%
summarize(mean_hourly = mean(output, na.rm = T))
long_ca_energy_dp %>%
filter(output>0) %>%
group_by(day, source)
long_ca_energy_dp %>%
filter(output>0) %>%
group_by(day, source) %>%
summarize(max_daily = max(output, na.rm = T)) %>%
arrange(desc(max_daily))
long_ca_energy_dp %>%
group_by(source) %>%
summarize(max_hourly = mean(max, na.rm = T)) %>%
arrange(desc(max_hourly))
long_ca_energy_dp %>%
+     group_by(source) %>%
+     summarize(max_hourly = max(output, na.rm = T)) %>%
+     arrange(desc(max_hourly))
long_ca_energy_dp %>%
group_by(source) %>%
summarize(mean_hourly = mean(output, na.rm = T)) %>%
arrange(desc(mean_hourly))
long_ca_energy_dp %>%
group_by(source) %>%
summarize(max_hourly = max(output, na.rm = T)) %>%
arrange(desc(max_hourly))
long_ca_energy_dp %>%
filter(output>0) %>%
group_by(day, source) %>%
summarize(mean_daily = mean(output, na.rm = T)) %>%
arrange(desc(mean_daily))
source(here::here("data/day3_objects.R"))
?here
# Scatterplot
ggplot(data = gapminder07) +
geom_point(mapping = aes(x = gdpPercap, y = lifeExp))
ggplot(gapminder07) +
geom_point(aes(x = gdpPercap, y = lifeExp)) +
labs(title = "Relationship between life expectancy and GDP per capita in 2007",
x = "GDP per capita", y = "Life expectancy")
ggplot(gapminder07) +
geom_point(aes(x = log(pop), y = log(gdpPercap)) +
labs(title = "Relationship between GDP per capita and population in 2007", x = "Logged GDP per capita", y = "Logged life expectancy")
ggplot(gapminder07) +
geom_point(aes(x = log(pop), y = log(gdpPercap))) +
labs(title = "Relationship between GDP per capita and population in 2007", x = "Logged GDP per capita", y = "Logged life expectancy")
ggplot(gapminder07) +
geom_point(aes(x = log(pop), y = log(gdpPercap))) +
labs(title = "Relationship between GDP per capita and population in 2007", x = "Logged GDP per capita", y = "Logged life expectancy")
long_gen %>%
group_by(datetime) %>%
summarise(output=sum(output)) %>%
ggplot() +
geom_col(aes(x=datetime, y=output)) +
labs(title="Total energy generated, by hour", x="Hour", y="Output (MW)")
long_gen %>%
filter(source=="large_hydro"|source=="small_hydro") %>%
group_by(datetime) %>%
summarise(output=sum(output)) %>%
ggplot() +
geom_col(aes(x=datetime, y=output)) +
labs(title="Total energy generated, by hour", x="Hour", y="Output (MW)")
imports %>%
ggplot() +
geom_line(aes(x=datetime, y=imports), size=1.2, col="red") +
labs(title="Energy imports over time", x="Hour", y="Amount imported (MW)")
generation %>%
ggplot() +
geom_area(aes(x=datetime, y=wind), fill="darkblue") +
labs(title="Hourly wind power generation, Sept 3-9", x="Hour", y="Output (MW)")
generation %>%
ggplot() +
geom_line(aes(x=datetime, y=large_hydro), col="turquoise3") +
geom_smooth(aes(x=datetime, y=large_hydro)) +
labs(title="Hydroelectric (large) generation per hour, Sept 3-9", x="Hour", y="Output (MW)")
generation %>%
group_by('source') %>%
summarise(output=sum(output)) %>%
ggplot()
geom_col(aes(x=source, y=output), fill="darkred") +
geom_hline(aes(yintercept=mean(output))) +
labs(title="Total output per energy source over Sept 3-9", y="Output (MW)", x="Source")
generation %>%
group_by(source) %>%
summarise(output=sum(output)) %>%
ggplot()
geom_col(aes(x=source, y=output), fill="darkred") +
geom_hline(aes(yintercept=mean(output))) +
labs(title="Total output per energy source over Sept 3-9", y="Output (MW)", x="Source")
generation %>%
group_by(source) %>%
summarise(output=sum(output)) %>%
ggplot() +
geom_col(aes(x=source, y=output), fill="darkred") +
geom_hline(aes(yintercept=mean(output))) +
labs(title="Total output per energy source over Sept 3-9", y="Output (MW)", x="Source")
generation
long_merged_energy %>%
group_by(source) %>%
summarise(output=sum(output)) %>%
ggplot() +
geom_col(aes(x=source, y=output), fill="darkred") +
geom_hline(aes(yintercept=mean(output))) +
labs(title="Total output per energy source over Sept 3-9", y="Output (MW)", x="Source")
long_merged_energy %>%
group_by(source) %>%
summarise(output=sum(output)) %>%
ggplot() +
geom_col(aes(x=source, y=output), fill="darkred") +
geom_hline(aes(yintercept=mean(output))) +
geom_hline(aes(yintercept=median(output)), col = 'purple') +
labs(title="Total output per energy source over Sept 3-9", y="Output (MW)", x="Source")
long_merged_energy %>%
filter(source=="wind"|source=="solar"|source=="geothermal") %>%
ggplot() +
geom_line(aes(x=datetime, y=output, group=source, col=source), size=1.5) +
labs(title="Wind vs. Solar vs. Geothermal generation", subtitle="Hourly data from September 3-9, 2018", x="Hour", y="Output (MW)")
long_merged_energy %>%
filter(source=="wind"|source=="solar"|source=="geothermal") %>%
ggplot() +
geom_line(aes(x=datetime, y=output, col=source), size=1.5) +
labs(title="Wind vs. Solar vs. Geothermal generation", subtitle="Hourly data from September 3-9, 2018", x="Hour", y="Output (MW)")
library(dplyr)
library(lubridate)
data_schools <- read.csv(here::here("nys_schools.csv"),
stringsAsFactors = F)
library(dplyr)
library(lubridate)
here
library(dplyr)
library(lubridate)
data_schools <- read.csv(here::here("data/ca_energy_generation.csv"),
stringsAsFactors = F)
data_acs <- read.csv(here::here("data/ca_energy_imports.csv"),
stringsAsFactors = F)
rm(list=ls())
library(dplyr)
library(lubridate)
data_schools <- read.csv(here::here("data/ca_energy_generation.csv"),
stringsAsFactors = F)
data_acs <- read.csv(here::here("data/ca_energy_imports.csv"),
stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE)
names(data_schools)
names(data_acs)
data_acs
data_schools
class(data_schools)
for i in names(data_schools) {
for (i in names(data_schools)) {
print (class(data_schools&i))
}
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools$i))
}
data_schools
class(data_schools$biogas)
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools.i))
}
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools[i]))
}
for (i in names(data_schools)) {
print (class(data_schools$i))
}
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
}
['a']
[['a']]
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
if (any(data_schools[[i]] = NULL)) {print ('Missing')}
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
if (any(data_schools[[i]] == NULL)) {print ('Missing')}
}
names(
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
if (any(data_schools[[i]] == NULL)) {print ('Missing')}
}
for (i in names(data_schools)) {
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
if (any(data_schools[[i]] == NULL)) {print ('Missing')}
}
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
if (any(data_schools[[i]] != NULL)) {print ('Missing')}
}
View(data_schools)
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
}
names(data_acs)
for (i in names(data_acs)) {
print (class(data_acs[[i]]))
}
data_schools[df=="-99"]
data_schools[df=="-99"]<-NA
data_schools[data_schools=="-99"]
data_schools[data_schools==-99]
data_schools==-99
data_schools[data_schools==-99]<-NA
data_schools
names()
names(data_schools)
data_acs
data_schools
View(data_schools)
sum(is.na(data_schools))
sum(is.na(data_acs))
View(data_schools)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
names(data_schools)
library(dplyr)
library(lubridate)
data_schools <- read.csv(here::here("data/nys_schools.csv"),
stringsAsFactors = F)
data_acs <- read.csv(here::here("data/nys_acs.csv"),
stringsAsFactors = F)
names(data_schools)
for (i in names(data_schools)) {
print (class(data_schools[[i]]))
}
names(data_acs)
sum(is.na(data_schools))
for (i in names(data_acs)) {
print (class(data_acs[[i]]))
}
sum(is.na(data_acs))
data_schools[data_schools==-99]<-NA
data_acs[data_acs==-99]<-NA
sum(is.na(data_acs))
sum(is.na(data_schools))
View(data_schools)
View(data_acs)
View(data_schools)
summary(data_acs$county_per_poverty)
data_acs$loworhigh[data_acs$county_per_poverty <= thre1] <- 'low'
thre1 <- 0.1
thre2 <- 0.15
data_acs$loworhigh[data_acs$county_per_poverty <= thre1] <- 'low'
View(data_schools)
View(data_acs)
data_acs$loworhigh[data_acs$county_per_poverty >= thre2] <- 'high'
data_acs$loworhigh[data_acs$county_per_poverty > thre1 & data_acs$county_per_poverty < thre2] <- 'medium'
